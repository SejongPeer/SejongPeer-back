# main branch (zero downtime deployment) workflow
name: SejongPeer - BackEnd - CD

on:
  push:
    # main branch에 push(merge)될 경우 실행됩니다.
    branches:
      - main

permissions:
  contents: read

jobs:
  build:
    # build를 진행할 운영체제를 선택합니다.
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      # JDK를 17 버전으로 셋팅합니다.
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 프로젝트 저장소에 업로드하면 안되는 설정 파일들을 만들어줍니다.
      - name: Make application.yml
        run: |
          # src/main/resources 으로 경로를 이동합니다.
          cd ./src/main/resources
          # 필요한 yml 파일들을 만들어줍니다.
          touch ./application.yml
          touch ./application-actuator.yml
          touch ./application-datasource.yml
          touch ./application-infra.yml
          touch ./application-prod.yml
          touch ./application-security.yml
          touch ./application-storage.yml
          touch ./.env
          
          # 등록해둔 Github Secrets의 내용을 이용해서 yml 파일의 내용을 써줍니다.
          echo "$APPLICATION" > ./application.yml
          echo "$APPLICATION_ACTUATOR" > ./application-actuator.yml
          echo "$APPLICATION_DATASOURCE" > ./application-datasource.yml
          echo "$APPLICATION_PROD" > ./application-prod.yml
          echo "$APPLICATION_SECURITY" > ./application-security.yml
          echo "$APPLICATION_INFRA" > ./application-infra.yml
          echo "$APPLICATION_STORAGE" > ./application-storage.yml
          echo "$ENV" >./.env

        env:
          APPLICATION: ${{ secrets.APPLICATION }}
          APPLICATION_ACTUATOR: ${{ secrets.APPLICATION_ACTUATOR }}
          APPLICATION_DATASOURCE: ${{ secrets.APPLICATION_DATASOURCE }}
          APPLICATION_PROD: ${{ secrets.APPLICATION_PROD }}
          APPLICATION_SECURITY: ${{ secrets.APPLICATION_SECURITY }}
          APPLICATION_INFRA: ${{ secrets.APPLICATION_INFRA }}
          APPLICATION_STORAGE: ${{ secrets.APPLICATION_STORAGE }}
          ENV: ${{ secrets.ENV }}
        shell: bash

      - name: Gradle 권한 부여
        run: chmod +x gradlew

      - name: Gradle로 빌드 실행
        run: ./gradlew bootjar

      # 배포에 필요한 여러 설정 파일과 프로젝트 빌드파일을 zip 파일로 모아줍니다.
      - name: zip file 생성
        run: |
          mkdir deploy
          cp ./docker/docker-compose.blue.yml ./deploy/
          cp ./docker/docker-compose.green.yml ./deploy/
          cp ./appspec.yml ./deploy/
          cp ./docker/Dockerfile ./deploy/
          cp ./scripts/*.sh ./deploy/
          cp ./build/libs/*.jar ./deploy/
          chmod +x ./deploy/deploy.sh
          zip -r -qq -j ./sejongpeer-app.zip ./deploy

      # AWS에 연결해줍니다.
      - name: AWS 연결
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # S3에 프로젝트를 업로드 합니다.
      - name: S3에 프로젝트 업로드
        run: |
          aws s3 cp \
          --region ap-northeast-2 \
          ./sejongpeer-app.zip s3://sejongpeer-backend-app

      # CodeDelploy에 배포를 요청합니다.
      - name: Code Deploy 배포 요청
        run: aws deploy create-deployment --application-name sejongpeer-code-deploy-app
          --deployment-config-name CodeDeployDefault.AllAtOnce
          --deployment-group-name sejongpeer-code-deploy-app
          --s3-location bucket=sejongpeer-backend-app,bundleType=zip,key=sejongpeer-app.zip
