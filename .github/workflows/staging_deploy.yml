# Workflow의 이름을 지정합니다.
name: CI/CD using github actions

on:
  push:
    # main branch에 push(merge)될 경우 실행됩니다.
    branches: [ "cicdtest" ]

permissions:
  contents: read

jobs:
  build:
    environment: DEV
    # build를 진행할 운영체제를 선택합니다.
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: check
          cache-read-only: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/develop' }}

      - name: Make application.yml
        run: |
          # src/main/resources 으로 경로를 이동합니다.
          cd ./src/main/resources
          # 필요한 yml 파일들을 만들어줍니다.
          touch ./application.yml
          touch ./application-datasource.yml
          touch ./application-infra.yml
          touch ./application-dev.yml
          touch ./application-security.yml
          touch ./.env

          # 등록해둔 Github Secrets의 내용을 이용해서 yml 파일의 내용을 써줍니다.
          echo "$APPLICATION" > ./application.yml
          echo "$APPLICATION_DATASOURCE" > ./application-datasource.yml
          echo "$APPLICATION_DEV" > ./application-dev.yml
          echo "$APPLICATION_SECURITY" > ./application-security.yml
          echo "$APPLICATION_INFRA" > ./application-infra.yml
          echo "$ENV" >./.env

        env:
          APPLICATION: ${{ secrets.APPLICATION }}
          APPLICATION_DATASOURCE: ${{ secrets.APPLICATION_DATASOURCE }}
          APPLICATION_DEV: ${{ secrets.APPLICATION_DEV }}
          APPLICATION_SECURITY: ${{ secrets.APPLICATION_SECURITY }}
          APPLICATION_INFRA: ${{ secrets.APPLICATION_INFRA }}
        shell: bash

      ## create application.properties
      - name: make application-aws.properties
        run: |
          # spring의 resources 경로로 이동
          cd ./src/main/resources
          touch ./application.properties
          # GitHub-Actions에서 설정한 값을 application.properties 파일에 쓰기
          echo "${{ secrets.PROPERTIES }}" > ./application.properties
        shell: bash

      - name: Gradle 권한 부여
        run: chmod +x gradlew

      - name: Gradle로 빌드 실행
        run: ./gradlew bootjar

      #프로젝트 zip파일로 압축
      - name: Make Zip File
        run: |
          chmod +x ./scripts/staging_deploy.sh
          zip -qq -r ./sejong-peer-test-app.zip .
        shell: bash

      # AWS에 연결해줍니다.
      - name: AWS 연결
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_STAGING_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_STAGING_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # S3에 프로젝트를 업로드 합니다.
      - name: S3에 프로젝트 업로드
        run: |
          aws s3 cp \
          --region ap-northeast-2 \
          ./sejong-peer-test-app.zip s3://sejong-peer-bucket

      # CodeDelploy에 배포를 요청합니다.
      - name: Code Deploy 배포 요청
        run: aws deploy create-deployment --application-name sejong-peer-test-codedeploy
          --deployment-config-name CodeDeployDefault.AllAtOnce
          --deployment-group-name sejong-peer-test-codedeploy-group
          --s3-location bucket=sejong-peer-bucket,bundleType=zip,key=sejong-peer-test-app.zip

