name: SejongPeer - BackEnd - CI

on:
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      ## gradle caching
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: check
          cache-read-only: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/develop' }}

      # 프로젝트 저장소에 업로드하면 안되는 설정 파일들을 만들어줍니다.
      - name: Make application.yml
        run: |
          # src/main/resources 으로 경로를 이동합니다.
          cd ./src/main/resources
          # 필요한 yml 파일들을 만들어줍니다.
          touch ./application.yml
          touch ./application-datasource.yml
          touch ./application-dev.yml
          touch ./application-security.yml
          touch ./application-security.yml
          touch ./.env
          # 등록해둔 Github Secrets의 내용을 이용해서 yml 파일의 내용을 써줍니다.
          echo "$APPLICATION" > ./application.yml
          echo "$APPLICATION_DATASOURCE" > ./application-datasource.yml
          echo "$APPLICATION_DEV" > ./application-dev.yml
          echo "$APPLICATION_SECURITY" > ./application-security.yml
          echo "$APPLICATION_INFRA" > ./application-infra.yml
          echo "$ENV" >./.env
        env:
          APPLICATION: ${{ secrets.APPLICATION }}
          APPLICATION_DATASOURCE: ${{ secrets.APPLICATION_DATASOURCE }}
          APPLICATION_DEV: ${{ secrets.APPLICATION_DEV }}
          APPLICATION_SECURITY: ${{ secrets.APPLICATION_SECURITY }}
        shell: bash

      - name: Gradle 권한 부여
        run: chmod +x gradlew

      - name: Gradle로 빌드 실행
        run: ./gradlew bootjar
